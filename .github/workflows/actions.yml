name: actions
'on':
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os:
          - ubuntu-18.04
        python-version:
          - '3.8'
    steps:
      - name: Cache APT packages
        uses: actions/cache@v2
        env:
          cache-name: cache-apt-packages
        with:
          # APT cache directories to cache
          path: |
            /var/lib/apt/lists
            /var/lib/rpm
          # Hash key here is adapted from npm example at
          # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action
          # It might be overkill for APT.
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('/var/lib/apt/lists/lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: >-
          sudo apt-get update

          sudo apt-get install -y g++-8 gdal-bin gfortran-8 libgdal-dev
          libhdf5-serial-dev libnetcdf-dev netcdf-bin python-pip
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |-
            $HOME/.cache/pip
          key: '${{ runner.os }}-${{ hashFiles(''TODO'') }}'

      # TODO: this presently checks out source in
      # /home/runner/work/gsflow_v2/gsflow_v2; it would be nice to
      # eliminate the redundant subdirectory in the path suffix.
      - uses: actions/checkout@v2
      - run: export CXX="g++"
      - run: pip install -r requirements.txt
      - run: pip install --upgrade numpy
      - run: pip install requests
      - run: 'pip install https://github.com/modflowpy/pymake/zipball/master'
      - run: 'pip install shapely[vectorize]'
      - run: pip install nose-timer
      - run: 'pip install https://github.com/modflowpy/flopy/zipball/develop'
      - run: 'pip install https://github.com/pygsflow/pygsflow/zipball/master'
      - run: 'export PYTHONPATH=$PYTHONPATH:.'
      - run: >-
          echo python path; python -c "from __future__ import print_function;
          import sys; print(sys.path)"
      - run: >-
          python -c "import os; is_travis = 'TRAVIS' in os.environ;
          print('TRAVIS {}'.format(is_travis))"
      - run: >-
          echo flopy version; python -c "from __future__ import print_function;
          import flopy; print(flopy.__version__)"
      - run: >-
          echo numpy version; python -c "import numpy;
          print(numpy.version.version)"
      - run: >-
          echo pandas version; python -c "import pandas as pd;
          print(pd.__version__)"
      - run: echo pyshp; python -c "import shapefile; print(shapefile.__version__)"
      - run: echo nosetests version; nosetests --version
      - run: >-
          cd autotest;
          sh make_linux_gfortran.sh
      - run: 'nosetests -v --with-id --with-timer -w ./autotest'
